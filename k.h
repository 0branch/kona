/* This file was automatically generated.  Do not edit! */
#if defined(DEBUG)
I CV(K v);
void tf(N n);
#endif
void boilerplate();
int main(int argc,S *argv);
V ptf(V v);
K _dot_t();
extern V vn_[];
void finally();
I kinit();
extern K KFIXED;
K load(S s);
I attend();
I ksender(I sockfd,K y,I t);
K modified_execute(K x);
K _db(K x);
K read_tape(I i,I type);
extern fd_set master;
I close_tape(I i);
I wipe_tape(I i);
extern M0 CP[FD_SETSIZE];
void *get_in_addr(struct sockaddr *sa);
I parsedepth(PDA p);
I complete(S a,I n,PDA *q,I *marks);
#if defined(__MACH__) || defined(__OpenBSD__)
I getline(S *s,I *n,FILE *f);
#endif
I line(FILE *f,S *a,I *n,PDA *p);
I lines(FILE *f);
I prompt(I n);
void init_genrand64(unsigned long long seed);
void seedPRNG(I s);
I randomBits();
K bv_ex(V *p,K k);
K ex1(V *w,K k);
K ex0(V *v,K k,I r);
V ex_(V a,I r);
K wd_(S s,I n,K *dict,K func);
K ex2(V *v,K k);
K vf_ex(V q,K g);
K dv_ex(K a,V *p,K b);
extern S vm_s[];
extern S vd_s[];
extern S vt_s[];
void printAtDepth(V u,K a,I d,I x,I vdep,I b);
I args(int n,S *v);
int splitprint(V u,const char *s,...);
I needspt0(F f);
I isescape(UC c);
I valence(V p);
I specialValence(V p);
I adverbClass(V p);
extern V vt_[];
extern V vd_[];
extern V vm_[];
I sva(V p);
I charsAdverb(C c);
I isCharAdverb(C c);
C adverbsChar(V p);
I charsVerb(C c);
I isCharVerb(C c);
C verbsChar(V p);
I charpos(S s,C c);
I stringHasChar(S s,C c);
extern S IFP[3];
extern S IFS[3];
extern V addressSSR,addressWhat,addressAt,addressDot,addressColon;
extern V vd0[];
extern V vm0[];
extern V vd[];
extern V vm[];
K _6d(K a,K b);
K _5d(K x,K y);
K _4d(K x,K y);
K _3d(K x,K y);
K _2d(K a,K b);
K _1d(K x,K y);
K _0d(K a,K b);
K _6m(K x);
K _5m(K x);
K _4m(K x);
K _3m(K x);
K _2m(K a);
K _1m(K x);
K _0m(K a);
extern C vc[];
extern V adverbs[];
K eachpair();
K eachleft();
K eachright();
K each();
K scan();
K over();
extern C ac[];
I bk(V p);
extern V ends[];
K end();
K mergeGrade(K a,I r);
void doMergeGrade(K a,I r,K x,K y,I s,I t);
void merger(K a,I r,K x,K y,I s,I t,I m);
I mergerComparer(K a,I r,I i,I j);
K charGrade(K a,I r);
K _i();
K distributionGrade(K a,I r,I u,I v);
I KC(K a,K b);
I simpleString(S a);
K promote(K a);
K demote(K a);
K collapse(K x);
I VA(V p);
K kclone(K a);
I rp2(I v);
S spn(S s,I n);
S sp(S k);
I SC(S a,S b);
I StoI(S s,I *n);
F FF(F f);
I FC(F a,F b);
I strlenn(S s,I k);
S strdupn(S s,I k);
S sdup(S s);
K newE(S s,K k);
K newEntry(S s);
K Kv();
K Kn();
K Kd();
K Ks(S x);
K Kc(C x);
K Kf(F x);
K Ki(I x);
void pdafree(PDA p);
C bottom(PDA p);
C pop(PDA p);
C peek(PDA p);
I appender(S *s,I *n,S t,I k);
I push(PDA p,C c);
PDA newPDA();
N newN();
K kap(K *a,V v);
K kapn(K *a,V v,I n);
K _n();
K kapn_(K *a,V *v,I n);
I kexpander(K *p,I n);
I cl2(I v);
V unpool(I r);
V amem(I k);
V kalloc(I k);
K newK(I t,I n);
I nearest(I i,I m);
I bp(I t);
K ci(K a);
I repool(V v,I r);
I lsz(I k);
I sz(I t,I n);
I PG();
#if defined(DEBUG)
extern V krec[1000000];
extern I kreci;
#endif
K show(K a);
K cd(K a);
I OOM_CD(I g,...);
K KX(K x);
K wd(S s,I n);
K ex(K a);
K XN(S s,I n);
K X(S s);
I min(I a,I b);
I max(I a,I b);
extern C PPON;
extern I PPMAX;
extern I PP;
extern S LS;
extern K NIL;
extern S PORT;
extern S __d;
extern I SEED;
extern K KTREE;
extern N SYMBOLS;
I oerr();
K kerr(S s);
extern C errmsg[256];
V KP[sizeof(V)*8+1];
